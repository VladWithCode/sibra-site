package components

import "github.com/vladwithcode/sibra-site/internal/db"

var picFormScriptHandle = templ.NewOnceHandle()

templ UpdatePropImagesForm(property *db.Property, successfulUpdate bool) {
	<div id="prop-data-wrapper" hx-swap-oob="outerHTML">
		@templ.JSONScript("property-data", property)
	</div>
	<script id="update-prop-pic-form-script">
        const MAX_PIC_COUNT = 12
        let newPics = []
        const delPics = new Set()
        const emptyPicsMsg = "<p id=\"update-prop-pic-form-empty\" class=\"text-lg text-slate-300 font-bold py-12\">Agrega imagenes de la propiedad</p>"
        document.addEventListener("DOMContentLoaded", () => {
            initUpdateForm(MAX_PIC_COUNT, emptyPicsMsg, newPics, delPics)

            htmx.on("htmx:configRequest", e => {
                if (e.target.id !== "property-pic-form") {
                    return
                }

                delete e.detail.parameters["pics-inp"]
                e.detail.parameters["pics"] = []
                e.detail.parameters["newPics"] = []
                e.detail.parameters["delPics"] = []

                for (let pic of newPics) {
                    pic.file.id = pic.id
                    e.detail.parameters["pics"].push(pic.file)
                    e.detail.parameters["newPics"].push(pic.id + ";" + pic.fileName)
                }

                for (let pic of delPics.values()) {
                    e.detail.parameters["delPics"].push(pic)
                }

                gsap.to(
                    "#property-pic-form-loading-spinner",
                    { autoAlpha: 1, height: "100%", width: "100%", ease: "power2.in" },
                )
                document.getElementById("update-prop-pic-form-submit").disabled = true
            })

            htmx.on("htmx:afterSwap", e => {
                if (e.target.id !== "property-pic-form") {
                    return
                }

                newPics = []
                delPics.clear()
                initUpdateForm(MAX_PIC_COUNT, emptyPicsMsg, newPics, delPics)
                gsap.to(
                    "#property-pic-form-loading-spinner",
                    { autoAlpha: 0, height: "0%", width: "0%", ease: "power2.in" },
                )
                document.getElementById("update-prop-pic-form-submit").disabled = false

                let propertyPicForm = document.getElementById("property-pic-form")

                if (propertyPicForm.hasAttribute("data-successful-update")) {
                    gsap.to(propertyPicForm, {
                        borderColor: "rgb(34 197 94)",
                        boxShadow: "0px 2px 10px 1px rgb(34 197 94/10%)",
                        duration: 0.4,
                    })
                    gsap.from("#property-pic-form-success-msg", {
                        autoAlpha: 0,
                        height: 0,
                        duration: 0.4,
                    }, "<")
                    resetTimerID = setTimeout(() => {
                        gsap.to(propertyPicForm, { borderColor: "", boxShadow: "0px 0px 0px 0px transparent" })
                        gsap.to("#property-pic-form-success-msg", { autoAlpha: 0, height: 0 }, "<")

                        gsap.delayedCall(0.5, () => document.getElementById("property-pic-form-success-msg").remove())
                    }, 3000)
                }
            })
        })

        function initUpdateForm(maxPicCount, emptyPicsMsg, newPics, delPics) {
            let propertyData = getPropertyData()
            if (propertyData.imgs === null) {
                propertyData.imgs = []
            }

            let delBtns = document.querySelectorAll("[data-pic-del-btn]")
            for (let btn of delBtns) {
                btn.addEventListener("click", handleDeletePic)
            }
            let restoreBtns = document.querySelectorAll("[data-pic-restore-btn]")
            for (let btn of restoreBtns) {
                btn.addEventListener("click", () => {
                    btn.parentElement.classList.remove("is-del-pic")
                    delPics.delete(btn.dataset.picRestoreBtn)
                })
            }

            document.getElementById("pics-inp").addEventListener("change", e => {
                if (propertyData.imgs.length >= maxPicCount) {
                    alert("No puedes agregar más de "+ maxPicCount + " imagenes.")
                    e.preventDefault()
                    e.target.value = ""
                    return
                }
                document.getElementById("update-prop-pic-form-empty")?.remove()
                let picPreview = document.getElementById("picture-preview")

                for (let pic of e.target.files) {
                    let picData = {
                        id: "new-prop-pic-" + Date.now().toString() + "-" + propertyData.id,
                        alt: "Imagen",
                        file: pic,
                        fileName: pic.name,
                    }
                    picData.el = createPicElement(picData)

                    picPreview.appendChild(picData.el)
                    newPics.push(picData)
                }

                // Always clear file input
                e.target.value = ""
            })
            document.getElementById("main-pic").addEventListener("change", e => {
                if (e.target.files.length === 0 || e.target.files.length > 1) {
                    alert("¡La imagen principal es requerida y solo debe ser 1!");
                    return
                }
                document.getElementById("update-prop-pic-form-main-empty")?.remove()
                let mainPic = createPicElement({ 
                    id: "new-prop-main-pic-" + propertyData.id,
                    alt: "Imagen principal para la propiedad con id " + propertyData.id,
                    file: e.target.files[0],
                    fileName: e.target.files[0].name,
                    onDelete: () => {
                        document.getElementById("main-pic").value = ""
                    }
                })
                mainPic.setAttribute("data-is-main-pic", "")
                document.getElementById("main-preview").innerHTML = ""
                document.getElementById("main-preview").appendChild(mainPic)
            })
        }
        function createPicElement(picData) {
            let imgWrapper = document.createElement("div")
            imgWrapper.className = "relative z-0 w-72 aspect-video is-new-pic"
            imgWrapper.id = picData.id
            imgWrapper.setAttribute("data-is-new-pic", "")

            let imgEl = document.createElement("img")
            imgEl.className = "h-full w-full object-cover object-center rounded"
            imgEl.src = URL.createObjectURL(picData.file)
            imgEl.alt = picData.alt
            // imgEl.addEventListener("click", function(e) { console.log(this); })

            let delBtn = document.createElement("button")
            delBtn.className = "absolute top-2 right-2 h-6 w-6 opacity-80 hover:opacity-100 drop-shadow-slate-800 hover:drop-shadow-2xl"
            delBtn.innerHTML = `<svg class="h-6 w-6 fill-slate-50 z-10 hover:fill-red-500 ">
    <use href="/static/svg/times.svg#times"></use>
</svg>`
            delBtn.type = "button"
            delBtn.dataset.picDelBtn = picData.id
            delBtn.addEventListener("click", function(e) {
                handleDeletePic.apply(this, [e])
                if (typeof picData.onDelete === "function") {
                    picData.onDelete.apply(this, [e])
                }
            })

            imgWrapper.appendChild(imgEl)
            imgWrapper.appendChild(delBtn)
            return imgWrapper
        }
        function handleDeletePic(e) {
            e.preventDefault()
            let isNewPic = this.parentElement.hasAttribute("data-is-new-pic")
            let isMainPic = this.parentElement.hasAttribute("data-is-main-pic")
            let picId = this.dataset.picDelBtn

            if (isNewPic) {
                newPics = newPics.filter(pic => pic.id !== picId)
                this.parentElement.remove()
                return
            }

            delPics.add(picId)
            this.parentElement.classList.add("is-del-pic")
            this.parentElement.setAttribute("data-is-del-pic", "")
            let picCount = getPropertyData().imgs.length || 0
            picCount += newPics.length
            if (picCount === 0) {
                document.getElementById("picture-preview").innerHTML = emptyPicsMsg
            }
        }

        function getPropertyData() {
            return JSON.parse(document.getElementById("property-data").textContent)
        }
    </script>
	<form
		hx-post={ "/api/property/pictures/" + property.Id }
		hx-encoding="multipart/form-data"
		hx-swap="outerHTML"
		hx-select="#property-pic-form"
		class="relative border border-slate-300 rounded px-4 py-2 space-y-2 basis-1/2 grow-0 ml-auto z-0"
		id="property-pic-form"
		data-successful-update?={ successfulUpdate }
	>
		<div
			class="absolute flex top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 bg-slate-700/65 items-center justify-center rounded invisible z-30"
			id="property-pic-form-loading-spinner"
		>
			<div class="space-y-4">
				<svg class="fill-slate-300 w-16 h-16 mx-auto animate-spin">
					<use href="/static/svg/spinner.svg#spinner"></use>
				</svg>
				<p class="text-xl font-semibold text-slate-300">Cargando...</p>
			</div>
		</div>
		<h3 class="font-bold text-slate-700">Imagenes de la propiedad</h3>
		<div class="basis-1/2 grow-0 space-y-1">
			<label for="pics-inp" class="block text-xs text-slate-400 font-semibold">Imagenes</label>
			<input
				type="file"
				name="pics-inp"
				id="pics-inp"
				class="w-full border border-slate-300 rounded px-2 py-1"
				accept="image/*"
				multiple
			/>
		</div>
		<div class="flex flex-wrap gap-4 basis-full p-2 border border-slate-300 rounded" id="picture-preview">
			if len(property.Images) > 0 {
				for _, img := range property.Images {
					<div class="relative w-72 aspect-video z-0">
						<img
							class="w-full h-full object-cover object-center rounded"
							src={ "/static/properties/" + property.Id + "/" + img }
							alt={ "Imagen de la propiedad " + property.Slug }
						/>
						<button
							type="button"
							class="del-btn absolute top-2 right-2 h-6 w-6 opacity-80 hover:opacity-100 drop-shadow-slate-800 hover:drop-shadow-2xl"
							data-pic-del-btn={ img }
						>
							<svg class="h-6 w-6 fill-slate-50 z-10 hover:fill-red-500 ">
								<use href="/static/svg/times.svg#times"></use>
							</svg>
						</button>
						<button
							type="button"
							class="restore-btn absolute top-2 right-2 opacity-80 hover:opacity-100 drop-shadow-slate-800 hover:drop-shadow-2xl invisible"
							data-pic-restore-btn={ img }
						>
							<svg class="h-7 w-7 fill-slate-50 z-10 hover:fill-emerald-500">
								<use href="/static/svg/undo.svg#undo"></use>
							</svg>
						</button>
					</div>
				}
			} else {
				<p
					id="update-prop-pic-form-empty"
					class="text-lg text-slate-300 font-bold py-12"
				>Agrega imagenes de la propiedad</p>
			}
		</div>
		<div class="py-1"></div>
		<div class="basis-1/2 grow-0 space-y-1">
			<label for="prop-pic-inp" class="block text-xs text-slate-400 font-semibold">Imagen principal</label>
			<input
				type="file"
				name="main-pic"
				id="main-pic"
				class="w-full border border-slate-300 rounded px-2 py-1"
				accept="image/*"
			/>
		</div>
		<div class="flex flex-wrap gap-2 justify-evenly basis-full p-2 border border-slate-300 rounded" id="main-preview">
			if property.MainImg != "" {
				<div class="relative w-72 aspect-video z-0 is-main-pic" data-is-main-pic>
					<img
						class="w-full h-full object-cover object-center rounded"
						src={ "/static/properties/" + property.Id + "/" + property.MainImg }
						alt={ "Imagen de la propiedad " + property.Slug }
					/>
					<button
						type="button"
						class="del-btn absolute top-2 right-2 h-6 w-6 opacity-80 hover:opacity-100 drop-shadow-slate-800 hover:drop-shadow-2xl"
						data-pic-del-btn={ property.MainImg }
					>
						<svg class="h-6 w-6 fill-slate-50 z-10 hover:fill-red-500 ">
							<use href="/static/svg/times.svg#times"></use>
						</svg>
					</button>
					<button
						type="button"
						class="restore-btn absolute top-2 right-2 opacity-80 hover:opacity-100 drop-shadow-slate-800 hover:drop-shadow-2xl invisible"
						data-pic-restore-btn={ property.MainImg }
					>
						<svg class="h-7 w-7 fill-slate-50 z-10 hover:fill-emerald-500">
							<use href="/static/svg/undo.svg#undo"></use>
						</svg>
					</button>
				</div>
			} else {
				<p
					id="update-prop-pic-form-main-empty"
					class="text-lg text-slate-300 font-bold py-12"
				>
					Agrega la imagen principal para la propiedad
				</p>
			}
		</div>
		<div class="py-2"></div>
		if successfulUpdate {
			<p class="text-emerald-500 font-medium invisible" id="property-pic-form-success-msg">
				Se actualizo la propiedad con exito
			</p>
			<div class="py-1"></div>
		}
		<div class="basis-full flex justify-end gap-2">
			<!-- <div class="flex">
				<button
					id="update-prop-pic-form-cancel"
					class="basis-1/3 px-4 py-2 rounded bg-slate-500 text-stone-50 disabled:opacity-80"
					disabled
				>
					Cancelar
				</button>
			</div> -->
			<div class="flex justify-end">
				<button
					id="update-prop-pic-form-submit"
					class="basis-1/3 px-4 py-2 rounded bg-slate-700 text-stone-50 disabled:opacity-80"
					type="submit"
				>Enviar</button>
			</div>
		</div>
	</form>
}
